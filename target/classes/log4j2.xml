<?xml version="1.0" encoding="UTF-8" ?>
<!--
    日志级别：按照从低到高为：All < Trace(追踪) < Debug < Info < Warn < Error < Fatal(严重错误) < OFF.
　　All: 最低等级的，用于打开所有日志记录.
　　Trace: 是追踪
　　Debug: 指出细粒度信息事件
　　Info: 消息在粗粒度级别上突出强调应用程序的运行过程.
　　Warn: 输出警告及warn以下级别的日志.
　　Error: 输出错误信息日志.
　　Fatal: 输出每个严重的错误事件将会导致应用程序的退出的日志.
　　OFF: 最高等级的，用于关闭所有日志记录.
-->
<!--
    根节点Configuration 有两个属性：status,monitorInterval
    status: 用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，会看到log4j2内部各种详细输出
    monitorInterval: 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.
    根节点Configuration 有两个子节点:Appenders,Loggers
    Appenders: 定义所有的appender，用来声明日志以什么样的方式输入
    Loggers: 可以定义多个Logger
 -->
<Configuration status="WARN" monitorInterval="300">
    <properties>
        <property name="LOG_HOME">G:/logs</property>
        <property name="ROLL_LOG_HOME">${LOG_HOME}/rollingFile</property>
    </properties>

    <!--Appenders节点 有三种子节点:Console、RollingFile、File-->
    <Appenders>
        <!--
            Console节点用来定义输出到控制台的Appender
            name: 指定Appender的名字
    　　　　target: SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
    　　　　PatternLayout: 输出格式，不设置默认为:%m%n.
        -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出格式 %d{HH:mm:ss.SSS} 表示输出到毫秒时间 -->
            <!--%t 输出当前线程名-->
            <!--%-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补空格-->
            <!--logger 表示使用的logger名称-->
            <!--%msg 日志内容 即：looger.info("message")中的message-->
            <!--%n 换行-->
            <!--
                {36} 表示：如果不带参数，则输出完整的logger名称；如果参数是整数n（只支持正整数），
                则先将logger名称依照小数点(.)分割成n段，然后取右侧的n段；
                如果参数不是整数，则除了最右侧的一段，其他整段字符都用这个字符代替，保留小数点；
                不管怎么写，最右侧的一段都保持不变。默认不带参数，并输出logger的完整名称。
             -->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

        <!--File节点用来定义输出到指定位置的文件的Appender-->
        <File name="MyFile" fileName="${LOG_HOME}/infoLogs.log">
            <!--class 输出所在类-->
            <!--%L 输出行号-->
            <!--%M 输出所在方法名-->
            <patternLayout pattern="%d{HH:mm:ss.SSS} %-7level%class{36} %M %L - %msg%xEx%n" />
        </File>

        <!--注意：RollingFileAppender 不要配置与其他 FileAppender 相同名称的filename-->


        <!--RollingFile/RollingRandomAccessFile节点用来定义超过指定大小自动删除旧的创建新的的Appender-->
        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${ROLL_LOG_HOME}/rollingLogs.log"
                     filePattern="${ROLL_LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log"
                                 immediateFlush="true" append="true">
            <!--filePattern: 指定新建日志文件的名称格式-->
            <!--immediateFlush: 表示所有消息都会被立即输出，设为false则不输出，默认值是true-->
            <!--Append: true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true-->
            <!--
                ThresholdFilter：只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）
                ACCEPT:接受, 日志信息就会直接写入日志文件,后续的过滤器不再进行过滤
                DENY:拒绝, 日志信息不会写入日志文件
                NEUTRAL:中立，被第一个过滤器接受的日志信息，会继续用后面的过滤器进行过滤，只有符合所有过滤器条件的日志信息，才会被最终写入日志文件
            -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
            <!--%l 输出语句所在的行数, 包括类名、方法名、文件名、行数-->
            <!--%p 输出日志级别-->
            <!--%m 输出日志内容-->
            <PatternLayout pattern="[%d{HH:mm:ss.SSS}] [%p] - %l -%m%n" />
            <Policies>
                <!--
                    Policies: 指定滚动日志的策略，就是什么时候进行新建日志文件输出日志
    　　　　　　　  TimeBasedTriggeringPolicy: 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am
    　　　　　　　　SizeBasedTriggeringPolicy: 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小
    　　　　　　　　DefaultRolloverStrategy: 用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)
                -->
                <!--更新时间，每天更新-->
                <TimeBasedTriggeringPolicy  modulate="true" interval="24"/>
                <SizeBasedTriggeringPolicy size="100M"/>
                <DefaultRolloverStrategy max="10"/>
                <!--<DefaultRolloverStrategy>
                    <Delete basePath="${LOG_HOME}" maxDepth="1">
                        <IfFileName glob="all*.zip"/>
                    </Delete>
                </DefaultRolloverStrategy>-->
            </Policies>
        </RollingFile>


    </Appenders>

    <!--只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--AppenderRef：用来指定该日志输出到哪个Appender-->
        <Root level="ALL">
            <AppenderRef ref="Console"/>
        </Root>

        <Logger name="com.yunyang.pagehelper.controller" level="debug" additivity="false">
            <AppenderRef ref="RollingFileInfo"/>
        </Logger>


        <!--
            additivity="false"表示在该logger中输出的日志不会再延伸到父层logger。
            这里如果改为true，则会延伸到Root Logger，遵循Root Logger的配置也输出一次
        -->
        <!--这里设置的level,程序会打印高于或等于这个level的日志，设置的日志等级越高，打印出来的日志就越少-->
        <Logger name="com.yunyang.test.mylog" level="info" additivity="true">
            <AppenderRef ref="MyFile"/>
        </Logger>


    </Loggers>
</Configuration>